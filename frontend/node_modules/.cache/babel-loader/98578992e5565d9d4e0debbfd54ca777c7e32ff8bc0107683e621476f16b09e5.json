{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import getBreakfastMockData from \"./test/mocks/breakfastMockData\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n// import { Link } from \"react-router-dom\";\n// import CreatePage from \"./component/CreatePage\";\n\n// import \"./assets/styles/main.css\";\n// import \"./assets/styles/App.css\";\n\n// /**\n//  * Renders a table row for a breakfast item with its details and an input field for quantity.\n//  * @param {Object} props - The props passed to the component.\n//  * @param {Object} props.formData - Contains data for a breakfast item.\n//  * @param {Boolean} props.imageExists - Indicates whether the image for the breakfast item exists.\n//  * @param {Function} props.handleChange - Event handler for input change.\n//  * @param {Function} props.handleClick - Event handler for button click.\n//  * @returns {JSX.Element} JSX element representing the table row.\n//  */\n\n// function FormComponent({ formData, imageExists, handleChange, handleClick }) {\n//     const [number, setNumber] = useState(\"\");\n//     const handleInputChange = (event) => {\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//         handleChange(event);\n//     };\n\n//     return (\n//         <tr key={formData.id}>\n//             <td>{formData.name}</td>\n//             <td>{formData.colour}</td>\n//             <td>\n//                 <div>${formData.pricePerKg}</div>\n//                 <div>\n//                     <input\n//                         type=\"text\"\n//                         value={number}\n//                         onChange={handleInputChange}\n//                         placeholder=\"Enter a number (grams)\"\n//                     />\n//                 </div>\n//                 <div>Total Price: ${(formData.pricePerKg * number) / 1000}</div>\n//             </td>\n//             <td>\n//                 {imageExists && (\n//                     <img\n//                         src={\"/\" + formData.name + \".png\"}\n//                         alt=\"file not found\"\n//                     ></img>\n//                 )}\n//             </td>\n//         </tr>\n//     );\n// }\n\n// /**\n//  * Main component of the application that manages the state and functionality.\n//  * @returns {JSX.Element} JSX element representing the main container of the application with buttons and a table to display breakfast item data.\n//  */\n\n// function App() {\n//     const [number, setNumber] = useState(\"\");\n//     const [formDataList, setFormDataList] = useState([]);\n//     const [imageExists, setImageExists] = useState(true);\n//     const [makeTable, setMakeTable] = useState(false);\n//     const [counter, setCounter] = useState(1);\n\n//     useEffect(() => {\n//         const runHandleClick = () => {\n//             if (formDataList.length < 5) {\n//                 updateCounter();\n//                 console.log(\"counter\", counter);\n\n//                 const data = getBreakfastMockData(counter);\n//                 console.log(\"data:\", data);\n\n//                 handleClick(data);\n//             }\n//         };\n\n//         runHandleClick();\n//         console.log(\"formDataList\", formDataList);\n\n//         return () => {};\n//     }, [formDataList]);\n\n//     /**\n//      * Updates the counter value cyclically from 1 to 5.\n//      */\n\n//     function updateCounter() {\n//         if (counter === 5) {\n//             setCounter(1);\n//         } else {\n//             setCounter(counter + 1);\n//         }\n//     }\n\n//     /**\n//      * Sends a POST request to the server with breakfast item data and updates the formDataList state.\n//      * @param {Object} bodyData - The data to be sent in the request body.\n//      */\n\n//     function handleClick(bodyData) {\n//         fetch(\"https://localhost:7089/breakfasts\", {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify(bodyData),\n//         })\n//             .then((response) => {\n//                 if (!response.ok) {\n//                     throw new Error(\"Network response was not ok\");\n//                 } else {\n//                     response.json().then((json) => {\n//                         setFormDataList([...formDataList, json]);\n//                     });\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error(\n//                     \"There was a problem with your fetch operation:\",\n//                     error\n//                 );\n//             });\n//     }\n\n//     /**\n//      * Toggles the makeTable state to show/hide the table.\n//      */\n//     function generateTable() {\n//         setMakeTable(!makeTable);\n//     }\n\n//     /**\n//      * Handles changes in the quantity input field.\n//      * @param {Object} event - The event object.\n//      */\n//     const handleChange = (event) => {\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">HTTP Request</h1>\n//             <button className=\"btn\" onClick={generateTable}>\n//                 Make Table\n//             </button>\n//             <Link to=\"/create-page\">Create Page</Link>\n//             <Routes>\n//                 <Route path=\"/create-page\" element={<CreatePage />} />\n//             </Routes>\n//             {makeTable && (\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Name</th>\n//                             <th>Colour</th>\n//                             <th>Price Per Kg</th>\n//                             <th>Image</th>\n//                         </tr>\n//                     </thead>\n//                     <th>Image</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {formDataList.map((formData) => (\n//                             <FormComponent\n//                                 key={formData.id}\n//                                 formData={formData}\n//                                 imageExists={imageExists}\n//                                 handleChange={handleChange}\n//                                 handleClick={handleClick}\n//                             />\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/team7lmao/repos/patient_zero/frontend/src/Appold.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import getBreakfastMockData from \"./test/mocks/breakfastMockData\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n// import { Link } from \"react-router-dom\";\n// import CreatePage from \"./component/CreatePage\";\n\n// import \"./assets/styles/main.css\";\n// import \"./assets/styles/App.css\";\n\n// /**\n//  * Renders a table row for a breakfast item with its details and an input field for quantity.\n//  * @param {Object} props - The props passed to the component.\n//  * @param {Object} props.formData - Contains data for a breakfast item.\n//  * @param {Boolean} props.imageExists - Indicates whether the image for the breakfast item exists.\n//  * @param {Function} props.handleChange - Event handler for input change.\n//  * @param {Function} props.handleClick - Event handler for button click.\n//  * @returns {JSX.Element} JSX element representing the table row.\n//  */\n\n// function FormComponent({ formData, imageExists, handleChange, handleClick }) {\n//     const [number, setNumber] = useState(\"\");\n//     const handleInputChange = (event) => {\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//         handleChange(event);\n//     };\n\n//     return (\n//         <tr key={formData.id}>\n//             <td>{formData.name}</td>\n//             <td>{formData.colour}</td>\n//             <td>\n//                 <div>${formData.pricePerKg}</div>\n//                 <div>\n//                     <input\n//                         type=\"text\"\n//                         value={number}\n//                         onChange={handleInputChange}\n//                         placeholder=\"Enter a number (grams)\"\n//                     />\n//                 </div>\n//                 <div>Total Price: ${(formData.pricePerKg * number) / 1000}</div>\n//             </td>\n//             <td>\n//                 {imageExists && (\n//                     <img\n//                         src={\"/\" + formData.name + \".png\"}\n//                         alt=\"file not found\"\n//                     ></img>\n//                 )}\n//             </td>\n//         </tr>\n//     );\n// }\n\n// /**\n//  * Main component of the application that manages the state and functionality.\n//  * @returns {JSX.Element} JSX element representing the main container of the application with buttons and a table to display breakfast item data.\n//  */\n\n// function App() {\n//     const [number, setNumber] = useState(\"\");\n//     const [formDataList, setFormDataList] = useState([]);\n//     const [imageExists, setImageExists] = useState(true);\n//     const [makeTable, setMakeTable] = useState(false);\n//     const [counter, setCounter] = useState(1);\n\n//     useEffect(() => {\n//         const runHandleClick = () => {\n//             if (formDataList.length < 5) {\n//                 updateCounter();\n//                 console.log(\"counter\", counter);\n\n//                 const data = getBreakfastMockData(counter);\n//                 console.log(\"data:\", data);\n\n//                 handleClick(data);\n//             }\n//         };\n\n//         runHandleClick();\n//         console.log(\"formDataList\", formDataList);\n\n//         return () => {};\n//     }, [formDataList]);\n\n//     /**\n//      * Updates the counter value cyclically from 1 to 5.\n//      */\n\n//     function updateCounter() {\n//         if (counter === 5) {\n//             setCounter(1);\n//         } else {\n//             setCounter(counter + 1);\n//         }\n//     }\n\n//     /**\n//      * Sends a POST request to the server with breakfast item data and updates the formDataList state.\n//      * @param {Object} bodyData - The data to be sent in the request body.\n//      */\n\n//     function handleClick(bodyData) {\n//         fetch(\"https://localhost:7089/breakfasts\", {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//             },\n//             body: JSON.stringify(bodyData),\n//         })\n//             .then((response) => {\n//                 if (!response.ok) {\n//                     throw new Error(\"Network response was not ok\");\n//                 } else {\n//                     response.json().then((json) => {\n//                         setFormDataList([...formDataList, json]);\n//                     });\n//                 }\n//             })\n//             .catch((error) => {\n//                 console.error(\n//                     \"There was a problem with your fetch operation:\",\n//                     error\n//                 );\n//             });\n//     }\n\n//     /**\n//      * Toggles the makeTable state to show/hide the table.\n//      */\n//     function generateTable() {\n//         setMakeTable(!makeTable);\n//     }\n\n//     /**\n//      * Handles changes in the quantity input field.\n//      * @param {Object} event - The event object.\n//      */\n//     const handleChange = (event) => {\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">HTTP Request</h1>\n//             <button className=\"btn\" onClick={generateTable}>\n//                 Make Table\n//             </button>\n//             <Link to=\"/create-page\">Create Page</Link>\n//             <Routes>\n//                 <Route path=\"/create-page\" element={<CreatePage />} />\n//             </Routes>\n//             {makeTable && (\n//                 <table>\n//                     <thead>\n//                         <tr>\n//                             <th>Name</th>\n//                             <th>Colour</th>\n//                             <th>Price Per Kg</th>\n//                             <th>Image</th>\n//                         </tr>\n//                     </thead>\n//                     <th>Image</th>\n//                         </tr>\n//                     </thead>\n//                     <tbody>\n//                         {formDataList.map((formData) => (\n//                             <FormComponent\n//                                 key={formData.id}\n//                                 formData={formData}\n//                                 imageExists={imageExists}\n//                                 handleChange={handleChange}\n//                                 handleClick={handleClick}\n//                             />\n//                         ))}\n//                     </tbody>\n//                 </table>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}