{"ast":null,"code":"var _jsxFileName = \"/home/team7lmao/repos/react_http/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import \"./main.css\";\n// import \"./App.css\";\n// // const images = require.context(\"../public\", true);\n\n// function App() {\n//     const [data, setData] = useState([]);\n//     const [number, setNumber] = useState(\"\");\n//     const [imageExists, setImageExists] = useState(true);\n//     // todo: implement a function that reads the public folder and checks if the image exists\n//     const staticFileList = [\"cheese\", \"cheese2\", \"cheese3\"]; // Define your static list of files here\n\n//     function getPosts() {\n//         fetch(\n//             \"https://localhost:7089/breakfasts/a07898b0-fffa-439c-944e-216893ddec8e\"\n//         )\n//             .then((response) => response.json())\n//             .then((json) => setData(json));\n\n//         if (data.name && staticFileList.includes(data.name)) {\n//             // todo: checkImageExists(data.imgUrl);\n//             console.log(\"xdd\");\n//             setImageExists(true);\n//         } else {\n//             setImageExists(false);\n//             console.log(\"xdd2\");\n//         }\n//     }\n\n//     const handleChange = (event) => {\n//         // Ensure only numbers are entered\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">HTTP Request</h1>\n//             <button className=\"btn\" onClick={getPosts}>\n//                 Get posts\n//             </button>\n//             <input\n//                 type=\"text\"\n//                 value={number}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter a number\"\n//             />\n//             {console.log(data.id)}\n\n//             {/* todo implement a condition that makes sense instead of data.id */}\n//             {data.id && (\n//                 <ul>\n//                     cheese: {data.name}, colour: {data.colour}, Total Price: $\n//                     {(data.pricePerKg * number) / 1000}, img:\n//                     {imageExists && (\n//                         <img src={\"/\" + data.name + \".png\"} alt=\"xdd\"></img>\n//                     )}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport \"./main.css\";\nimport \"./App.css\";\n// const images = require.context(\"../public\", true);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [imageExists, setImageExists] = useState(true);\n  // todo: implement a function that reads the public folder and checks if the image exists\n  const staticFileList = [\"cheese\", \"cheese2\", \"cheese3\"]; // Define your static list of files here\n\n  // updated getPosts function\n  function handleClick() {\n    const breakfastData = {\n      name: \"cheese\",\n      colour: \"yellow\",\n      pricePerKg: 10.0,\n      imgUrl: \"www\"\n    };\n    fetch(\"https://localhost:7089/breakfasts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(breakfastData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      } else {\n        console.log(\"worked xdd\");\n      }\n      // Do something if the request is successful\n    }).catch(error => {\n      console.error(\"There was a problem with your fetch operation:\", error);\n    });\n  }\n  function getPosts() {\n    fetch(\"https://localhost:7089/breakfasts/a07898b0-fffa-439c-944e-216893ddec8e\").then(response => response.json()).then(json => setData(json));\n    if (data.name && staticFileList.includes(data.name)) {\n      // todo: checkImageExists(data.imgUrl);\n      console.log(\"xdd\");\n      setImageExists(true);\n    } else {\n      setImageExists(false);\n      console.log(\"xdd2\");\n    }\n  }\n  const handleChange = event => {\n    // Ensure only numbers are entered\n    const value = event.target.value.replace(/\\D/g, \"\");\n    setNumber(value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"HTTP Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: handleClick,\n      children: \"Get all posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: getPosts,\n      children: \"Get posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: number,\n      onChange: handleChange,\n      placeholder: \"Enter a number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), console.log(data.id), data.id && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [\"cheese: \", data.name, \", colour: \", data.colour, \", Total Price: $\", data.pricePerKg * number / 1000, \", img:\", imageExists && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/\" + data.name + \".png\",\n        alt: \"xdd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"LuVFpEz38aOMRMwk2WZJZe9fHcM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","data","setData","number","setNumber","imageExists","setImageExists","staticFileList","handleClick","breakfastData","name","colour","pricePerKg","imgUrl","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","console","log","catch","error","getPosts","json","includes","handleChange","event","value","target","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","onChange","placeholder","id","src","alt","_c","$RefreshReg$"],"sources":["/home/team7lmao/repos/react_http/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import \"./main.css\";\n// import \"./App.css\";\n// // const images = require.context(\"../public\", true);\n\n// function App() {\n//     const [data, setData] = useState([]);\n//     const [number, setNumber] = useState(\"\");\n//     const [imageExists, setImageExists] = useState(true);\n//     // todo: implement a function that reads the public folder and checks if the image exists\n//     const staticFileList = [\"cheese\", \"cheese2\", \"cheese3\"]; // Define your static list of files here\n\n//     function getPosts() {\n//         fetch(\n//             \"https://localhost:7089/breakfasts/a07898b0-fffa-439c-944e-216893ddec8e\"\n//         )\n//             .then((response) => response.json())\n//             .then((json) => setData(json));\n\n//         if (data.name && staticFileList.includes(data.name)) {\n//             // todo: checkImageExists(data.imgUrl);\n//             console.log(\"xdd\");\n//             setImageExists(true);\n//         } else {\n//             setImageExists(false);\n//             console.log(\"xdd2\");\n//         }\n//     }\n\n//     const handleChange = (event) => {\n//         // Ensure only numbers are entered\n//         const value = event.target.value.replace(/\\D/g, \"\");\n//         setNumber(value);\n//     };\n\n//     return (\n//         <div className=\"container\">\n//             <h1 className=\"title\">HTTP Request</h1>\n//             <button className=\"btn\" onClick={getPosts}>\n//                 Get posts\n//             </button>\n//             <input\n//                 type=\"text\"\n//                 value={number}\n//                 onChange={handleChange}\n//                 placeholder=\"Enter a number\"\n//             />\n//             {console.log(data.id)}\n\n//             {/* todo implement a condition that makes sense instead of data.id */}\n//             {data.id && (\n//                 <ul>\n//                     cheese: {data.name}, colour: {data.colour}, Total Price: $\n//                     {(data.pricePerKg * number) / 1000}, img:\n//                     {imageExists && (\n//                         <img src={\"/\" + data.name + \".png\"} alt=\"xdd\"></img>\n//                     )}\n//                 </ul>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport \"./main.css\";\nimport \"./App.css\";\n// const images = require.context(\"../public\", true);\n\nfunction App() {\n    const [data, setData] = useState([]);\n    const [number, setNumber] = useState(\"\");\n    const [imageExists, setImageExists] = useState(true);\n    // todo: implement a function that reads the public folder and checks if the image exists\n    const staticFileList = [\"cheese\", \"cheese2\", \"cheese3\"]; // Define your static list of files here\n\n    // updated getPosts function\n    function handleClick() {\n        const breakfastData = {\n            name: \"cheese\",\n            colour: \"yellow\",\n            pricePerKg: 10.0,\n            imgUrl: \"www\",\n        };\n        fetch(\"https://localhost:7089/breakfasts\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(breakfastData),\n        })\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(\"Network response was not ok\");\n                } else {\n                    console.log(\"worked xdd\");\n                }\n                // Do something if the request is successful\n            })\n            .catch((error) => {\n                console.error(\n                    \"There was a problem with your fetch operation:\",\n                    error\n                );\n            });\n    }\n\n    function getPosts() {\n        fetch(\n            \"https://localhost:7089/breakfasts/a07898b0-fffa-439c-944e-216893ddec8e\"\n        )\n            .then((response) => response.json())\n            .then((json) => setData(json));\n\n        if (data.name && staticFileList.includes(data.name)) {\n            // todo: checkImageExists(data.imgUrl);\n            console.log(\"xdd\");\n            setImageExists(true);\n        } else {\n            setImageExists(false);\n            console.log(\"xdd2\");\n        }\n    }\n\n    const handleChange = (event) => {\n        // Ensure only numbers are entered\n        const value = event.target.value.replace(/\\D/g, \"\");\n        setNumber(value);\n    };\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">HTTP Request</h1>\n            <button className=\"btn\" onClick={handleClick}>\n                Get all posts\n            </button>\n            <button className=\"btn\" onClick={getPosts}>\n                Get posts\n            </button>\n            <input\n                type=\"text\"\n                value={number}\n                onChange={handleChange}\n                placeholder=\"Enter a number\"\n            />\n            {console.log(data.id)}\n\n            {/* todo implement a condition that makes sense instead of data.id */}\n            {data.id && (\n                <ul>\n                    cheese: {data.name}, colour: {data.colour}, Total Price: $\n                    {(data.pricePerKg * number) / 1000}, img:\n                    {imageExists && (\n                        <img src={\"/\" + data.name + \".png\"} alt=\"xdd\"></img>\n                    )}\n                </ul>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}